<protocol name="hawaii">
  <interface name="wl_hawaii_shell" version="1">
    <description summary="create desktop widgets and helpers">
      Traditional user interfaces can rely on this interface to define the
      foundations of typical desktops. Currently it's possible to set up
      background, panels and locking surfaces.
    </description>

    <request name="add_key_binding">
      <description summary="add key binding">
        Bind a global shortcut.
      </description>
      <arg name="id" type="new_id" interface="wl_hawaii_key_binding"/>
      <arg name="key" type="uint"/>
      <arg name="modifiers" type="uint"/>
    </request>

    <request name="set_available_geometry">
      <description summary="set available geometry">
	The available geometry is a portion of the output free of any
	shell surface (such as Panel and Launcher).
	It's used by the compositor to know where mapped surfaces should
	be placed and to prevent maximized surfaces from covering shell
	surfaces.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
      <arg name="width" type="int"/>
      <arg name="height" type="int"/>
    </request>

    <request name="set_background">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_panel">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_launcher">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_special">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_overlay">
      <description summary="set overlay role">
        The surface set by this request will receive the overlay role.
        Overlays are special surfaces that shows for a limited amount
        of time.  Such surfaces are useful to display things like OSD.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_position">
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
    </request>

    <request name="set_lock_surface">
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="quit"/>

    <request name="lock"/>
    <request name="unlock"/>

    <request name="set_grab_surface">
      <description summary="set grab surface">
	The surface set by this request will receive a fake
	pointer.enter event during grabs at position 0, 0 and is
	expected to set an appropriate cursor image as described by
	the grab_cursor event sent just before the enter event.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="desktop_ready">
      <description summary="desktop is ready to be shown">
	Tell the server, that enough desktop elements have been drawn
	to make the desktop look ready for use. During start-up, the
	server can wait for this request with a black screen before
	starting to fade in the desktop, for instance. If the client
	parts of a desktop take a long time to initialize, we avoid
	showing temporary garbage.
      </description>
    </request>

    <request name="minimize_windows">
      <description summary="minimize all windows">
        Tell the server to minimize all windows.
      </description>
    </request>

    <request name="restore_windows">
      <description summary="restore all windows">
        Tell the server to restore all windows.
      </description>
    </request>

    <request name="add_workspace">
      <description summary="add workspace">
        Tell the server to add a new workspace.
      </description>
    </request>

    <request name="select_workspace">
      <description summary="select workspace">
        Tell the server to select the specified workspace.
      </description>
      <arg name="workspace" type="object" interface="wl_hawaii_workspace"/>
    </request>

    <request name="start_grab">
      <description summary="start grabbing an element">
        Tell the server we are starting to grab an element.
      </description>
      <arg name="id" type="new_id" interface="wl_hawaii_grab"/>
    </request>

    <event name="loaded">
      <description summary="tell the client to create and set its surfaces">
        Tell the shell we want it to create and set its surfaces such as
        background and panels.  The client will emit desktop_ready when
        all surfaces are ready.
      </description>
    </event>

    <event name="prepare_lock_surface">
      <description summary="tell the client to create, set the lock surface">
	Tell the shell we want it to create and set the lock surface, which is
	a GUI asking the user to unlock the screen. The lock surface is
	announced with 'set_lock_surface'. Whether or not the shell actually
	implements locking, it MUST send 'unlock' request to let the normal
        desktop resume.
      </description>
    </event>

    <event name="grab_cursor">
      <description summary="tell client what cursor to show during a grab">
	This event will be sent immediately before a fake enter event on the
	grab surface.
      </description>
      <arg name="cursor" type="uint"/>
    </event>

    <event name="window_mapped">
      <description summary="notify the client that a new window was created">
        This event will be sent immediately after a new window is mapped.
      </description>

      <arg name="id" type="new_id" interface="wl_hawaii_window"/>
      <arg name="title" type="string"/>
      <arg name="identifier" type="string"/>
      <arg name="state" type="int"/>
    </event>

    <event name="window_switching_started">
      <description summary="tell client to show the window switching overlay">
        This event will be sent immediately after window switching is started.
      </description>
    </event>

    <event name="window_switching_finished">
      <description summary="tell client to hide the window switching overlay">
        This event will be sent immediately after window switching finished.
      </description>
    </event>

    <event name="window_switched">
      <description summary="notify the client that the server switched to a window">
        Windows switching is handled by the server.
        The client provides a nice user interface that shows which window the server
        switched to. This event notifies the client which window the server switched to.
      </description>
      <arg name="window" type="object" interface="wl_hawaii_window"/>
    </event>

    <event name="workspace_added">
      <description summary="notify the client that a workspace was added">
        This event will be sent immediately after a workspace is added.
      </description>
      <arg name="workspace" type="new_id" interface="wl_hawaii_workspace"/>
      <arg name="active" type="int"/>
    </event>

    <enum name="cursor">
      <entry name="none" value="0"/>

      <entry name="resize_top" value="1"/>
      <entry name="resize_bottom" value="2"/>

      <entry name="arrow" value="3"/>

      <entry name="resize_left" value="4"/>
      <entry name="resize_top_left" value="5"/>
      <entry name="resize_bottom_left" value="6"/>

      <entry name="move" value="7"/>

      <entry name="resize_right" value="8"/>
      <entry name="resize_top_right" value="9"/>
      <entry name="resize_bottom_right" value="10"/>

      <entry name="busy" value="11"/>
    </enum>

    <enum name="window_state">
      <entry name="inactive" value="0"/>
      <entry name="active" value="1"/>
      <entry name="minimized" value="2"/>
      <entry name="maximized" value="4"/>
      <entry name="fullscreen" value="8"/>
    </enum>
  </interface>

  <interface name="wl_hawaii_key_binding" version="1">
    <description summary="interface for key bindings">
      This interface represents a key binding.
    </description>

    <event name="triggered">
      <description summary="key binding was triggered">
        This event will be sent when a registered key binding will be
        triggered.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_window" version="1">
    <description summary="interface to control client windows">
      Only one client can bind this interface at a time.
    </description>

    <request name="set_state">
      <description summary="set client window state">
        Set client window state.
      </description>

      <arg name="state" type="int"/>
    </request>

    <event name="title_changed">
      <description summary="window title have been changed">
        This event will be sent as soon as the window title is changed.
      </description>

      <arg name="title" type="string"/>
    </event>

    <event name="identifier_changed">
      <description summary="window class have been changed">
        This event will be sent as soon as the window class is changed.
      </description>

      <arg name="identifier" type="string"/>
    </event>

    <event name="state_changed">
      <description summary="window state have been changed">
        This event will be sent as soon as the window state changes.
      </description>

      <arg name="state" type="int"/>
    </event>

    <event name="unmapped">
      <description summary="window's surface was unmapped">
        This event will be sent immediately after the window is closed
        and its surface is unmapped.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_workspace" version="1">
    <description summary="control and manager workspaces">
      Each workspace can bind this interface.
    </description>

    <request name="remove">
      <description summary="remove workspace">
        Remove this workspace.
      </description>
    </request>

    <event name="activated">
      <description summary="workspace activated">
        This event will be sent immediately after this workspace is activated.
      </description>
    </event>

    <event name="deactivated">
      <description summary="workspace deactivated">
        This event will be sent immediately after this workspace is deactivated.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_grab" version="1">
    <description summary="desktop elements grabbing">
      Manage desktop elements grabbing and moving.
    </description>

    <request name="end">
      <description summary="end grab">
        Tell the server that the client stopped grabbing the element.
      </description>
    </request>

    <event name="focus">
      <description summary="element focused">
        This event will be sent when an element has focus.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="sx" type="fixed"/>
      <arg name="sy" type="fixed"/>
    </event>

    <event name="motion">
      <description summary="element motion">
        This event will be sent when an element is moving.
      </description>
      <arg name="time" type="uint"/>
      <arg name="sx" type="fixed"/>
      <arg name="sy" type="fixed"/>
    </event>

    <event name="button">
      <description summary="element clicked">
        This event will be sent when an element is clicked.
      </description>
      <arg name="time" type="uint"/>
      <arg name="button" type="uint"/>
      <arg name="state" type="uint"/>
    </event>
  </interface>
</protocol>

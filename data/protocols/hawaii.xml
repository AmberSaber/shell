<protocol name="hawaii">
  <copyright>
    Copyright (C) 2013 Pier Luigi Fiorini

    Permission to use, copy, modify, distribute, and sell this
    software and its documentation for any purpose is hereby granted
    without fee, provided that the above copyright notice appear in
    all copies and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of
    the copyright holders not be used in advertising or publicity
    pertaining to distribution of the software without specific,
    written prior permission.  The copyright holders make no
    representations about the suitability of this software for any
    purpose.  It is provided "as is" without express or implied
    warranty.

    THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
    SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
    AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
    ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
    THIS SOFTWARE.
  </copyright>

  <interface name="wl_hawaii_shell" version="1">
    <description summary="create desktop widgets and helpers">
      This interface defines the foundations of the Hawaii desktop.
    </description>

    <request name="add_key_binding">
      <description summary="add key binding">
        Bind a global shortcut.
      </description>
      <arg name="id" type="new_id" interface="wl_hawaii_key_binding"/>
      <arg name="key" type="uint"/>
      <arg name="modifiers" type="uint"/>
    </request>

    <request name="set_available_geometry">
      <description summary="set available geometry">
	The available geometry is a portion of the output free of any
	shell surface such as panels.
	It's used by the compositor to know where mapped surfaces should
	be placed and to prevent maximized surfaces from covering shell
	surfaces.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
      <arg name="width" type="int"/>
      <arg name="height" type="int"/>
    </request>

    <request name="set_lock_surface">
      <description summary="set lock role">
        The surface set by this request will receive the lock role.
        The lock surface is shown by the compositor when the session is
        locked, users interact with it to unlock the session.
        Only one surface can have the lock role.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_grab_surface">
      <description summary="set grab surface">
	The surface set by this request will receive a fake
	pointer.enter event during grabs at position 0, 0 and is
	expected to set an appropriate cursor image as described by
	the grab_cursor event sent just before the enter event.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_position">
      <description summary="change surface position">
        Move the surface to new coordinates.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
    </request>

    <request name="quit">
      <description summary="quit the compositor">
        Tell the server to quit.
        The shell client sends this request after the session has been
        closed to quit the compositor.
      </description>
    </request>

    <request name="lock">
      <description summary="lock the session">
        Tell the server to lock the session.
      </description>
    </request>

    <request name="unlock">
      <description summary="unlock the session">
        Tell the server to unlock the session.
      </description>
    </request>

    <request name="desktop_ready">
      <description summary="desktop is ready to be shown">
	Tell the server, that enough desktop elements have been drawn
	to make the desktop look ready for use. During start-up, the
	server can wait for this request with a black screen before
	starting to fade in the desktop, for instance. If the client
	parts of a desktop take a long time to initialize, we avoid
	showing temporary garbage.
      </description>
    </request>

    <request name="minimize_windows">
      <description summary="minimize all windows">
        Tell the server to minimize all windows.
      </description>
    </request>

    <request name="restore_windows">
      <description summary="restore all windows">
        Tell the server to restore all windows.
      </description>
    </request>

    <request name="add_workspace">
      <description summary="add workspace">
        Tell the server to add a new workspace.
      </description>
    </request>

    <request name="select_workspace">
      <description summary="select workspace">
        Tell the server to select the specified workspace.
      </description>
      <arg name="workspace" type="object" interface="wl_hawaii_workspace"/>
    </request>

    <event name="loaded">
      <description summary="tell the client to create and set its surfaces">
        Tell the shell we want it to create and set its surfaces such as
        background and panels.  The client will emit desktop_ready when
        all surfaces are ready.
      </description>
    </event>

    <event name="prepare_lock_surface">
      <description summary="tell the client to create, set the lock surface">
	Tell the shell we want it to create and set the lock surface, which is
	a GUI asking the user to unlock the screen. The lock surface is
	announced with 'set_lock_surface'. Whether or not the shell actually
	implements locking, it MUST send 'unlock' request to let the normal
        desktop resume.
      </description>
    </event>

    <event name="grab_cursor">
      <description summary="tell client what cursor to show during a grab">
	This event will be sent immediately before a fake enter event on the
	grab surface.
      </description>
      <arg name="cursor" type="uint"/>
    </event>

    <event name="window_mapped">
      <description summary="notify the client that a new window was created">
        This event will be sent immediately after a new window is mapped.
      </description>
      <arg name="id" type="new_id" interface="wl_hawaii_window"/>
      <arg name="title" type="string"/>
      <arg name="identifier" type="string"/>
      <arg name="state" type="int"/>
    </event>

    <event name="window_switching_started">
      <description summary="tell client to show the window switching overlay">
        This event will be sent immediately after window switching is started.
      </description>
    </event>

    <event name="window_switching_finished">
      <description summary="tell client to hide the window switching overlay">
        This event will be sent immediately after window switching finished.
      </description>
    </event>

    <event name="window_switched">
      <description summary="notify the client that the server switched to a window">
        Windows switching is handled by the server.
        The client provides a nice user interface that shows which window the server
        switched to. This event notifies the client which window the server switched to.
      </description>
      <arg name="window" type="object" interface="wl_hawaii_window"/>
    </event>

    <event name="workspace_added">
      <description summary="notify the client that a workspace was added">
        This event will be sent immediately after a workspace is added.
      </description>
      <arg name="workspace" type="new_id" interface="wl_hawaii_workspace"/>
      <arg name="active" type="int"/>
    </event>

    <enum name="cursor">
      <entry name="none" value="0"/>

      <entry name="resize_top" value="1"/>
      <entry name="resize_bottom" value="2"/>

      <entry name="arrow" value="3"/>

      <entry name="resize_left" value="4"/>
      <entry name="resize_top_left" value="5"/>
      <entry name="resize_bottom_left" value="6"/>

      <entry name="move" value="7"/>

      <entry name="resize_right" value="8"/>
      <entry name="resize_top_right" value="9"/>
      <entry name="resize_bottom_right" value="10"/>

      <entry name="busy" value="11"/>
    </enum>

    <enum name="window_state">
      <entry name="inactive" value="0"/>
      <entry name="active" value="1"/>
      <entry name="minimized" value="2"/>
      <entry name="maximized" value="4"/>
      <entry name="fullscreen" value="8"/>
    </enum>
  </interface>

  <interface name="wl_hawaii_panel_manager" version="1">
    <description summary="create panels">
      This interface is used by the shell to create panels.
      Only one client can bind.
    </description>

    <request name="set_panel">
      <description summary="set panel role">
        The surface set by this request will receive the panel role.
        Panels display launchers, buttons and other kind of elements.
      </description>
      <arg name="id" type="new_id" interface="wl_hawaii_panel"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>
  </interface>

  <interface name="wl_hawaii_panel" version="1">
    <enum name="edge">
      <entry name="left" value="0"/>
      <entry name="top" value="1"/>
      <entry name="right" value="2"/>
      <entry name="bottom" value="3"/>
    </enum>

    <enum name="alignment">
      <entry name="left" value="0"/>
      <entry name="center" value="1"/>
      <entry name="right" value="2"/>
    </enum>

    <request name="set_alignment">
      <description summary="set panel alignment">
        Set panel alignment.
      </description>
      <arg name="alignment" type="uint"/>
    </request>

    <request name="set_offset">
      <description summary="set panel offset">
        Set panel offset.
      </description>
      <arg name="offset" type="uint"/>
    </request>

    <request name="set_thickness">
      <description summary="set panel thickness">
        Set panel size.
      </description>
      <arg name="thickness" type="uint"/>
    </request>

    <request name="dock">
      <description summary="dock the panel">
        Set panel position on the specified output according to edge,
        alignment and offset.
      </description>
      <arg name="edge" type="uint"/>
      <arg name="output" type="object" interface="wl_output"/>
    </request>

    <event name="docked">
      <description summary="panel is docked">
        Emitted when the panel is docked.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_shell_surface" version="1">
    <request name="set_background">
      <description summary="set background role">
        The surface set by this request will receive the background role.
        Background surfaces are placed above all surfaces and can be used
        to show wallpapers.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_panel">
      <description summary="set panel role">
        The surface set by this request will receive the panel role.
        Panels display launchers, buttons and other kind of elements.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_overlay">
      <description summary="set overlay role">
        The surface set by this request will receive the overlay role.
        Overlays are special surfaces that shows for a limited amount
        of time.  Such surfaces are useful to display things like OSD.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_popup">
      <description summary="make the surface a popup surface">
	Map the surface as a popup.

	A popup surface is a surface with an added pointer grab.

	An existing implicit grab will be changed to owner-events mode,
	and the popup grab will continue after the implicit grab ends
	(i.e. releasing the mouse button does not cause the popup to
	be unmapped).

	The popup grab continues until the window is destroyed or a
	mouse button is pressed in any other window.
      </description>
      <arg name="id" type="new_id" interface="wl_hawaii_popup_surface"/>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="parent" type="object" interface="wl_surface"/>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="x" type="int"/>
      <arg name="y" type="int"/>
    </request>

    <request name="set_dialog">
      <description summary="set dialog role">
        The surface set by this request will receive the dialog role.
        Dialogs have a modal behavior which interrupts user's workflow.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>
  </interface>

  <interface name="wl_hawaii_popup_surface" version="1">
    <request name="dismiss">
      <description summary="break popup grab">
        Explicitely break the popup grab. Clients should hide the
        popup surface after calling this method.
      </description>
    </request>

    <event name="popup_done">
      <description summary="popup interaction is done">
        The popup_done event is sent out when a popup grab is broken,
        that is, when the users clicks on a different surface.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_key_binding" version="1">
    <description summary="interface for key bindings">
      This interface represents a key binding.
    </description>

    <event name="triggered">
      <description summary="key binding was triggered">
        This event will be sent when a registered key binding will be
        triggered.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_window" version="1">
    <description summary="interface to control client windows">
      Only one client can bind this interface at a time.
    </description>

    <request name="set_state">
      <description summary="set client window state">
        Set client window state.
      </description>
      <arg name="state" type="int"/>
    </request>

    <event name="title_changed">
      <description summary="window title have been changed">
        This event will be sent as soon as the window title is changed.
      </description>
      <arg name="title" type="string"/>
    </event>

    <event name="identifier_changed">
      <description summary="window class have been changed">
        This event will be sent as soon as the window class is changed.
      </description>
      <arg name="identifier" type="string"/>
    </event>

    <event name="state_changed">
      <description summary="window state have been changed">
        This event will be sent as soon as the window state changes.
      </description>
      <arg name="state" type="int"/>
    </event>

    <event name="unmapped">
      <description summary="window's surface was unmapped">
        This event will be sent immediately after the window is closed
        and its surface is unmapped.
      </description>
    </event>
  </interface>

  <interface name="wl_hawaii_workspace" version="1">
    <description summary="control and manager workspaces">
      Each workspace can bind this interface.
    </description>

    <request name="remove">
      <description summary="remove workspace">
        Remove this workspace.
      </description>
    </request>

    <event name="activated">
      <description summary="workspace activated">
        This event will be sent immediately after this workspace is activated.
      </description>
    </event>

    <event name="deactivated">
      <description summary="workspace deactivated">
        This event will be sent immediately after this workspace is deactivated.
      </description>
    </event>
  </interface>
</protocol>

/*
 * <one line to give the library's name and an idea of what it does.>
 * Copyright (C) 2014  David Edmundson <david@davidedmundson.co.uk>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

#include <QDBusConnection>
#include <QDBusAbstractInterface>

#ifndef ENHANCEDQDBUSABSTRACTINTERFACE_H
#define ENHANCEDQDBUSABSTRACTINTERFACE_H

#include "qlogind_export.h"

/**
 * This is an extension of QDBusAbstractInterface with two main features
 * 1) use of org.freedesktop.DBus.Properties.GetAll() to minimise DBus traffic to once per interface
 * 2) use of org.freedesktop.DBus.Properties.PropertiesChanged
 * 3 TODO) handling of differnet property changing types; const, true, false, invalidates
 * 4 TODO) make non cachable properties asynchronous to fetch
 *
 * Autogenerated files should be made using the attached awesome enhancedqdbusxml2cpp
 *
 * I should upstream all this into QDBusAbstractInterface, though I'm not sure I can get the
 * getall method in there
 *
 */

class QDBusPendingCallWatcher;

class QLOGIND_EXPORT EnhancedQDBusAbstractInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    EnhancedQDBusAbstractInterface(const QString& service, const QString& path, const char* interface, QDBusConnection connection, QObject* parent = 0);
    void fetchInitialProperties();
    bool hasInitialProperties() const;

    QVariant property(const char *property) const;

signals:
    void initialPropertiesFetched();

private slots:
    void hanldleInitialProperties(QDBusPendingCallWatcher *call);
    void remotePropertiesChanged(const QString &interface, const QVariantMap &changedProperties, const QStringList &invalidatedProperties);

private:
    QVariantMap m_properties;
    bool m_hasInitialProperties;
};

#endif

